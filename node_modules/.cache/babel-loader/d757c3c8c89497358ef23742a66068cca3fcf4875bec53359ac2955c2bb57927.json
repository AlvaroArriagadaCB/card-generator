{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar isString_1 = require(\"./isString\");\nvar isBlob_1 = require(\"./isBlob\");\nvar isFile_1 = require(\"./isFile\");\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\nexports.loadString = function (src, cb) {\n  return src ? cb(null, {\n    src: src\n  }) : cb(new Error(\"src is empty\"));\n};\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\nexports.loadFile = function (file, cb) {\n  var reader = new FileReader();\n  reader.onload = function (evt) {\n    cb(null, {\n      src: reader.result,\n      alt: file.name\n    });\n  };\n  reader.onerror = function (evt) {\n    return cb(reader.error);\n  };\n  reader.readAsDataURL(file);\n};\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexports.loadBlob = function (blob, cb) {\n  try {\n    var src_1 = URL.createObjectURL(blob);\n    var done = function () {\n      return URL.revokeObjectURL(src_1);\n    };\n    cb(null, {\n      src: src_1\n    }, done);\n  } catch (err) {\n    return cb(err);\n  }\n};\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n *\n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexports.loadAnything = function (prop, cb) {\n  return isString_1.isString(prop) ? exports.loadString(prop, cb) : isBlob_1.isBlob(prop) ? exports.loadBlob(prop, cb) : isFile_1.isFile(prop) ? exports.loadFile(prop, cb) : cb(new Error(\"prop `\" + prop + \"` is not a valid loadable object\"));\n};\nexports.default = exports.loadAnything;","map":{"version":3,"names":["isString_1","require","isBlob_1","isFile_1","exports","loadString","src","cb","Error","loadFile","file","reader","FileReader","onload","evt","result","alt","name","onerror","error","readAsDataURL","loadBlob","blob","src_1","URL","createObjectURL","done","revokeObjectURL","err","loadAnything","prop","isString","isBlob","isFile","default"],"sources":["/Users/loskilltrosblues/Desktop/dashboard/my-dashboard/node_modules/react-image-file/src/load.ts"],"sourcesContent":["import { isString } from './isString'\nimport { isBlob } from './isBlob'\nimport { isFile } from './isFile'\n\nexport interface ImageContentFromString{\n  src:string\n}\n\nexport interface ImageContentFromFile{\n  src:string\n  alt:string\n}\n\nexport interface ImageContentFromBlob{\n  src:string\n}\n\nexport type ImageContent = ImageContentFromBlob | ImageContentFromFile | ImageContentFromString\n\nexport interface LoadCallback{\n  (err:null,res:ImageContentFromString):void\n  (err:null,res:ImageContentFromFile):void\n  (err:null,res:ImageContentFromBlob,done:()=>void):void\n  (err:null,res:ImageContent,done?:()=>void):void\n  (err:Error|DOMError):void\n}\n\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\nexport const loadString = \n  (src:string,cb:LoadCallback) =>\n  ( src\n  ? cb(null,{src} as ImageContentFromString)\n  : cb(new Error(`src is empty`))\n  )\n\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\nexport const loadFile = \n  (file:File,cb:LoadCallback) => \n  { const reader = new FileReader()\n  ; reader.onload = (evt:ProgressEvent) =>\n    { cb( null,\n      { src:reader.result\n      , alt:file.name\n      } as ImageContentFromFile)\n    }\n  ; reader.onerror = (evt:ErrorEvent) => cb(reader.error)\n  ; reader.readAsDataURL(file);\n  }\n\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadBlob = \n  ( blob: Blob, cb: LoadCallback ) =>\n  { try\n    { const src = URL.createObjectURL( blob )\n    ; const done = () => URL.revokeObjectURL( src )\n    ; cb( null, { src } as ImageContentFromBlob, done );\n    }\n    catch( err )\n    { return cb( err )\n    }\n  }\n\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n * \n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadAnything = ( prop: File | Blob | string, cb: LoadCallback ) =>\n  ( isString( prop )\n  ? loadString( prop, cb )\n  : ( isBlob( prop )\n    ? loadBlob( prop, cb )\n    : ( isFile( prop )\n      ? loadFile( prop, cb )\n      : cb( new Error( `prop \\`${prop}\\` is not a valid loadable object` ) )\n      )\n    )\n  )\n\nexport default loadAnything"],"mappings":";;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAyBA;;;;;;;;;AASaG,OAAA,CAAAC,UAAU,GACrB,UAACC,GAAU,EAACC,EAAe;EAC3B,OAAED,GAAG,GACHC,EAAE,CAAC,IAAI,EAAC;IAACD,GAAG,EAAAA;EAAA,CAA2B,CAAC,GACxCC,EAAE,CAAC,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC;AAF/B,CAGC;AAEH;;;;;;;AAOaJ,OAAA,CAAAK,QAAQ,GACnB,UAACC,IAAS,EAACH,EAAe;EACxB,IAAMI,MAAM,GAAG,IAAIC,UAAU,EAAE;EAC/BD,MAAM,CAACE,MAAM,GAAG,UAACC,GAAiB;IAChCP,EAAE,CAAE,IAAI,EACR;MAAED,GAAG,EAACK,MAAM,CAACI,MAAM;MACjBC,GAAG,EAACN,IAAI,CAACO;KACc,CAAC;EAC5B,CAAC;EACDN,MAAM,CAACO,OAAO,GAAG,UAACJ,GAAc;IAAK,OAAAP,EAAE,CAACI,MAAM,CAACQ,KAAK,CAAC;EAAhB,CAAgB;EACrDR,MAAM,CAACS,aAAa,CAACV,IAAI,CAAC;AAC5B,CAAC;AAEH;;;;;;;;;AASaN,OAAA,CAAAiB,QAAQ,GACnB,UAAEC,IAAU,EAAEf,EAAgB;EAC5B,IACA;IAAE,IAAMgB,KAAG,GAAGC,GAAG,CAACC,eAAe,CAAEH,IAAI,CAAE;IACvC,IAAMI,IAAI,GAAG,SAAAA,CAAA;MAAM,OAAAF,GAAG,CAACG,eAAe,CAAEJ,KAAG,CAAE;IAA1B,CAA0B;IAC7ChB,EAAE,CAAE,IAAI,EAAE;MAAED,GAAG,EAAAiB;IAAA,CAA0B,EAAEG,IAAI,CAAE;EACnD,CAAC,CACD,OAAOE,GAAI,EACX;IAAE,OAAOrB,EAAE,CAAEqB,GAAG,CAAE;EAClB;AACF,CAAC;AAEH;;;;;;;;;;AAUaxB,OAAA,CAAAyB,YAAY,GAAG,UAAEC,IAA0B,EAAEvB,EAAgB;EACxE,OAAEP,UAAA,CAAA+B,QAAQ,CAAED,IAAI,CAAE,GAChB1B,OAAA,CAAAC,UAAU,CAAEyB,IAAI,EAAEvB,EAAE,CAAE,GACpBL,QAAA,CAAA8B,MAAM,CAAEF,IAAI,CAAE,GACd1B,OAAA,CAAAiB,QAAQ,CAAES,IAAI,EAAEvB,EAAE,CAAE,GAClBJ,QAAA,CAAA8B,MAAM,CAAEH,IAAI,CAAE,GACd1B,OAAA,CAAAK,QAAQ,CAAEqB,IAAI,EAAEvB,EAAE,CAAE,GACpBA,EAAE,CAAE,IAAIC,KAAK,CAAE,WAAUsB,IAAI,qCAAmC,CAAE,CAErE;AARH,CASC;AAEH1B,OAAA,CAAA8B,OAAA,GAAe9B,OAAA,CAAAyB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}