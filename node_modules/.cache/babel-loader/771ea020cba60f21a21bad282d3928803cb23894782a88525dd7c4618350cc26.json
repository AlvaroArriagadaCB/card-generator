{"ast":null,"code":"var _jsxFileName = \"/Users/loskilltrosblues/Desktop/dashboard/my-dashboard/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ImageUploading from \"react-images-uploading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_NUMBER_OF_IMAGES = 4;\nconst IMAGE_SIZE = 250;\nconst ImageUploader = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const onChange = imageList => {\n    // limit to only 4 images\n    if (imageList.length > MAX_NUMBER_OF_IMAGES) {\n      imageList = imageList.slice(0, MAX_NUMBER_OF_IMAGES);\n    }\n    setImages(imageList);\n  };\n  return /*#__PURE__*/_jsxDEV(ImageUploading, {\n    value: images,\n    onChange: onChange,\n    maxNumber: MAX_NUMBER_OF_IMAGES,\n    dataURLKey: \"data_url\",\n    children: _ref => {\n      let {\n        onImageUpload,\n        dragProps\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n          },\n          children: [images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: `${IMAGE_SIZE}px`,\n              height: `${IMAGE_SIZE}px`,\n              margin: \"10px\",\n              border: \"1px solid gray\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              overflow: \"hidden\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: `uploaded image ${index}`,\n              style: {\n                width: \"100%\",\n                height: \"100%\",\n                objectFit: \"cover\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)), [...Array(MAX_NUMBER_OF_IMAGES - images.length)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: `${IMAGE_SIZE}px`,\n              height: `${IMAGE_SIZE}px`,\n              margin: \"10px\",\n              border: \"1px dashed gray\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            },\n            ...dragProps,\n            children: \"Click or drag file to this area to upload.\"\n          }, `empty-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), images.length === MAX_NUMBER_OF_IMAGES && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"500px\",\n            height: \"500px\",\n            display: \"grid\",\n            gridTemplateColumns: \"1fr 1fr\",\n            gridTemplateRows: \"1fr 1fr\",\n            gap: \"10px\",\n            marginTop: \"20px\"\n          },\n          children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: `${IMAGE_SIZE}px`,\n              height: `${IMAGE_SIZE}px`,\n              border: \"1px solid gray\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              overflow: \"hidden\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: `uploaded image ${index}`,\n              style: {\n                width: \"100%\",\n                height: \"100%\",\n                objectFit: \"cover\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)\n          }, `grid-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"mOoWwfdsCKBG2MIVzAXM/MEStpE=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","ImageUploading","jsxDEV","_jsxDEV","MAX_NUMBER_OF_IMAGES","IMAGE_SIZE","ImageUploader","_s","images","setImages","onChange","imageList","length","slice","value","maxNumber","dataURLKey","children","_ref","onImageUpload","dragProps","style","display","flexWrap","map","image","index","width","height","margin","border","alignItems","justifyContent","overflow","alt","objectFit","fileName","_jsxFileName","lineNumber","columnNumber","Array","_","gridTemplateColumns","gridTemplateRows","gap","marginTop","_c","$RefreshReg$"],"sources":["/Users/loskilltrosblues/Desktop/dashboard/my-dashboard/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport ImageUploading, { ImageListType } from \"react-images-uploading\";\n\nconst MAX_NUMBER_OF_IMAGES = 4;\nconst IMAGE_SIZE = 250;\ninterface Image {\n  dataURL: string;\n  file: File;\n}\n\n\nconst ImageUploader = () => {\n  const [images, setImages] = useState<Image[]>([]);\n\n  const onChange = (imageList: ImageListType) => {\n    // limit to only 4 images\n    if (imageList.length > MAX_NUMBER_OF_IMAGES) {\n      imageList = imageList.slice(0, MAX_NUMBER_OF_IMAGES);\n    }\n\n    setImages(imageList as Image[]);\n  };\n\n  return (\n    <ImageUploading\n      value={images}\n      onChange={onChange}\n      maxNumber={MAX_NUMBER_OF_IMAGES}\n      dataURLKey=\"data_url\"\n    >\n      {({ onImageUpload, dragProps }) => (\n        <div>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            {images.map((image, index) => (\n              <div\n                key={index}\n                style={{\n                  width: `${IMAGE_SIZE}px`,\n                  height: `${IMAGE_SIZE}px`,\n                  margin: \"10px\",\n                  border: \"1px solid gray\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  overflow: \"hidden\"\n                }}\n              >\n                <img\n                  alt={`uploaded image ${index}`}\n                  style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n                />\n              </div>\n            ))}\n            {[...Array(MAX_NUMBER_OF_IMAGES - images.length)].map((_, index) => (\n              <div\n                key={`empty-${index}`}\n                style={{\n                  width: `${IMAGE_SIZE}px`,\n                  height: `${IMAGE_SIZE}px`,\n                  margin: \"10px\",\n                  border: \"1px dashed gray\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\"\n                }}\n                {...dragProps}\n              >\n                Click or drag file to this area to upload.\n              </div>\n            ))}\n          </div>\n          {images.length === MAX_NUMBER_OF_IMAGES && (\n            <div\n              style={{\n                width: \"500px\",\n                height: \"500px\",\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 1fr\",\n                gridTemplateRows: \"1fr 1fr\",\n                gap: \"10px\",\n                marginTop: \"20px\"\n              }}\n            >\n              {images.map((image, index) => (\n                <div\n                  key={`grid-${index}`}\n                  style={{\n                    width: `${IMAGE_SIZE}px`,\n                    height: `${IMAGE_SIZE}px`,\n                    border: \"1px solid gray\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    overflow: \"hidden\"\n                  }}\n                >\n                  <img\n                    alt={`uploaded image ${index}`}\n                    style={{ width: \"100%\",\n                    height: \"100%\", objectFit: \"cover\" }}\n                    />\n                    </div>\n                    ))}\n                    </div>\n                    )}\n                    </div>\n                    )}\n                    </ImageUploading>\n                    );\n                    };\n                    \n                    export default ImageUploader;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}